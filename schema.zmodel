// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


plugin zod {
    provider = '@core/zod'
    output="./src/zod-schemas/"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id            String             @id @default(cuid())
    name          String?
    email         String?            @unique
    emailVerified DateTime?
    image         String?
    password      String
    role          UserRole           @default(USER)
    accounts      Account[]
    sessions      Session[]

    addresses     user_address[]
    orders        order[]
    transactions  user_transaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

abstract model standard_model {
    created_at DateTime @db.Timestamptz @default(now())
    updated_at DateTime @db.Timestamptz @updatedAt
}

abstract model standard_cuid_model extends standard_model {
    id String @id @default(cuid())
}

// ==================== Custom Models ====================

enum ProductCategory {
    EARPHONES
    HEADPHONES
    SPEAKERS
}

model product extends standard_cuid_model {
    name             String
    description      String
    category         ProductCategory
    disabled_at      DateTime?
    price_cents      Int
    card_image_url   String
    quantity         Int
    features_content String
    vat_percentage   Float

    accessories      product_accessory[]
    images           product_image[]
    orders           order_item[]
}

model product_accessory extends standard_cuid_model {
    name        String
    quantity    Int

    description String?

    product     product @relation(fields: [product_id], references: [id])
    product_id  String
}

model product_image extends standard_cuid_model {
    url        String
    alt        String

    product    product @relation(fields: [product_id], references: [id])
    product_id String
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
}

model order extends standard_cuid_model {
    status      OrderStatus  @default(PENDING)
    total_cents Int

    user        User         @relation(fields: [user_id], references: [id])
    user_id     String

    items       order_item[]
}

model order_item extends standard_cuid_model {
    quantity    Int
    price_cents Int

    order       order   @relation(fields: [order_id], references: [id])
    order_id    String

    product     product @relation(fields: [product_id], references: [id])
    product_id  String
}

model user_address extends standard_cuid_model {
    street_address String
    city           String
    zip_code       String
    country        String

    user           User   @relation(fields: [user_id], references: [id])
    user_id        String
}

enum TransactionType {
    DEPOSIT
    WITHDRAW
}

enum TransactionStatus {
    PENDING
    SUCCESS
    FAILED
}

model user_transaction extends standard_cuid_model {
    amount_cents Int
    method       String
    description  String

    type         TransactionType
    status       TransactionStatus @default(PENDING)

    user         User              @relation(fields: [user_id], references: [id])
    user_id      String
}